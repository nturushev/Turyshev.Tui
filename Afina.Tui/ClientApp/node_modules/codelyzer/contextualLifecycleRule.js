"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var sprintf_js_1 = require("sprintf-js");
var rules_1 = require("tslint/lib/rules");
var ngWalker_1 = require("./angular/ngWalker");
var utils_1 = require("./util/utils");
exports.getFailureMessage = function (failureParameters) {
    return sprintf_js_1.sprintf(Rule.FAILURE_STRING, failureParameters.methodName, failureParameters.className, failureParameters.metadataType);
};
var Rule = (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        var walker = new Walker(sourceFile, this.getOptions());
        return this.applyWithWalker(walker);
    };
    Rule.metadata = {
        description: 'Ensures that classes use allowed lifecycle method in its body.',
        options: null,
        optionsDescription: 'Not configurable.',
        rationale: "Some lifecycle methods can only be used in certain class types. For example, " + utils_1.LifecycleMethods.ngOnInit + "() method should not be used in an @" + utils_1.MetadataTypes.Injectable + " class.",
        ruleName: 'contextual-lifecycle',
        type: 'functionality',
        typescriptOnly: true
    };
    Rule.FAILURE_STRING = 'The method "%s" is not allowed for class "%s" because it is decorated with "%s"';
    return Rule;
}(rules_1.AbstractRule));
exports.Rule = Rule;
var Walker = (function (_super) {
    __extends(Walker, _super);
    function Walker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Walker.prototype.visitNgInjectable = function (metadata) {
        this.validateDecorator(metadata, utils_1.METADATA_TYPE_LIFECYCLE_MAPPER.Injectable);
        _super.prototype.visitNgInjectable.call(this, metadata);
    };
    Walker.prototype.visitNgPipe = function (metadata) {
        this.validateDecorator(metadata, utils_1.METADATA_TYPE_LIFECYCLE_MAPPER.Pipe);
        _super.prototype.visitNgPipe.call(this, metadata);
    };
    Walker.prototype.visitNgModule = function (metadata) {
        this.validateDecorator(metadata, utils_1.METADATA_TYPE_LIFECYCLE_MAPPER.NgModule);
        _super.prototype.visitNgModule.call(this, metadata);
    };
    Walker.prototype.validateDecorator = function (metadata, allowedMethods) {
        var className = utils_1.getClassName(metadata.controller);
        var metadataType = utils_1.getDecoratorName(metadata.decorator);
        if (!metadataType || !utils_1.isMetadataType(metadataType))
            return;
        for (var _i = 0, _a = metadata.controller.members; _i < _a.length; _i++) {
            var member = _a[_i];
            var memberName = member.name;
            if (!memberName)
                continue;
            var methodName = memberName.getText();
            if (!utils_1.isLifecycleMethod(methodName) || allowedMethods.has(methodName))
                continue;
            var failure = exports.getFailureMessage({ className: className, metadataType: metadataType, methodName: methodName });
            this.addFailureAtNode(member, failure);
        }
    };
    return Walker;
}(ngWalker_1.NgWalker));
