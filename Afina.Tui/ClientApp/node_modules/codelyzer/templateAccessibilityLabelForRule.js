"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
Object.defineProperty(exports, "__esModule", { value: true });
var lib_1 = require("tslint/lib");
var ngWalker_1 = require("./angular/ngWalker");
var basicTemplateAstVisitor_1 = require("./angular/templates/basicTemplateAstVisitor");
var mayContainChildComponent_1 = require("./util/mayContainChildComponent");
var Rule = (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        var walkerConfig = { templateVisitorCtrl: TemplateVisitorCtrl };
        var walker = new ngWalker_1.NgWalker(sourceFile, this.getOptions(), walkerConfig);
        return this.applyWithWalker(walker);
    };
    Rule.metadata = {
        description: 'Checks if the label has associated for attribute or a form element',
        optionExamples: [[true, { labelComponents: ['app-label'], labelAttributes: ['id'], controlComponents: ['app-input', 'app-select'] }]],
        options: {
            items: {
                type: 'object',
                properties: {
                    labelComponents: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    },
                    labelAttributes: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    },
                    controlComponents: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    }
                }
            },
            type: 'array'
        },
        optionsDescription: 'Add custom label, label attribute and controls',
        rationale: lib_1.Utils.dedent(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n    The label tag should either have a for attribute or should have associated control.\n    This rule supports two ways, either the label component should explicitly have a for attribute or a control nested inside the label component\n    It also supports adding custom control component and custom label component support."], ["\n    The label tag should either have a for attribute or should have associated control.\n    This rule supports two ways, either the label component should explicitly have a for attribute or a control nested inside the label component\n    It also supports adding custom control component and custom label component support."]))),
        ruleName: 'template-accessibility-label-for',
        type: 'functionality',
        typescriptOnly: true
    };
    Rule.FAILURE_STRING = 'A form label must be associated with a control';
    Rule.FORM_ELEMENTS = ['input', 'select', 'textarea'];
    return Rule;
}(lib_1.Rules.AbstractRule));
exports.Rule = Rule;
var TemplateVisitorCtrl = (function (_super) {
    __extends(TemplateVisitorCtrl, _super);
    function TemplateVisitorCtrl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TemplateVisitorCtrl.prototype.visitElement = function (element, context) {
        this.validateElement(element);
        _super.prototype.visitElement.call(this, element, context);
    };
    TemplateVisitorCtrl.prototype.validateElement = function (element) {
        var _a = this.getOptions() || {}, labelAttributes = _a.labelAttributes, labelComponents = _a.labelComponents, controlComponents = _a.controlComponents;
        controlComponents = Rule.FORM_ELEMENTS.concat(controlComponents || []);
        labelComponents = ['label'].concat(labelComponents || []);
        labelAttributes = ['for'].concat(labelAttributes || []);
        if (labelComponents.indexOf(element.name) === -1) {
            return;
        }
        var hasForAttr = element.attrs.some(function (attr) { return labelAttributes.indexOf(attr.name) !== -1; });
        var hasForInput = element.inputs.some(function (input) {
            return labelAttributes.indexOf(input.name) !== -1;
        });
        var hasImplicitFormElement = controlComponents.some(function (component) { return mayContainChildComponent_1.mayContainChildComponent(element, component); });
        if (hasForAttr || hasForInput || hasImplicitFormElement) {
            return;
        }
        var _b = element.sourceSpan, endOffset = _b.end.offset, startOffset = _b.start.offset;
        this.addFailureFromStartToEnd(startOffset, endOffset, Rule.FAILURE_STRING);
    };
    return TemplateVisitorCtrl;
}(basicTemplateAstVisitor_1.BasicTemplateAstVisitor));
var templateObject_1;
