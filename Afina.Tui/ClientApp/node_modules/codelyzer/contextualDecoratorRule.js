"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var sprintf_js_1 = require("sprintf-js");
var rules_1 = require("tslint/lib/rules");
var typescript_1 = require("typescript");
var ngWalker_1 = require("./angular/ngWalker");
var utils_1 = require("./util/utils");
exports.getFailureMessage = function (failureParameters) {
    return sprintf_js_1.sprintf(Rule.FAILURE_STRING, failureParameters.decoratorName, failureParameters.className, failureParameters.metadataType);
};
var Rule = (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        var walker = new Walker(sourceFile, this.getOptions());
        return this.applyWithWalker(walker);
    };
    Rule.metadata = {
        description: 'Ensures that classes use allowed decorator in its body.',
        options: null,
        optionsDescription: 'Not configurable.',
        rationale: "Some decorators can only be used in certain class types. For example, an @" + utils_1.Decorators.Input + " should not be used in an @" + utils_1.MetadataTypes.Injectable + " class.",
        ruleName: 'contextual-decorator',
        type: 'functionality',
        typescriptOnly: true
    };
    Rule.FAILURE_STRING = 'The decorator "%s" is not allowed for class "%s" because it is decorated with "%s"';
    return Rule;
}(rules_1.AbstractRule));
exports.Rule = Rule;
var Walker = (function (_super) {
    __extends(Walker, _super);
    function Walker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Walker.prototype.visitMethodDecorator = function (decorator) {
        this.validateDecorator(decorator);
        _super.prototype.visitMethodDecorator.call(this, decorator);
    };
    Walker.prototype.visitPropertyDecorator = function (decorator) {
        this.validateDecorator(decorator);
        _super.prototype.visitPropertyDecorator.call(this, decorator);
    };
    Walker.prototype.validateDecorator = function (decorator) {
        var klass = utils_1.getNextToLastParentNode(decorator);
        if (!typescript_1.isClassDeclaration(klass) || !klass.name)
            return;
        var metadataType = typescript_1.createNodeArray(klass.decorators)
            .map(function (x) { return x.expression.getText(); })
            .map(function (x) { return x.replace(/[^a-zA-Z]/g, ''); })
            .find(utils_1.isMetadataType);
        if (!metadataType)
            return;
        var decoratorName = utils_1.getDecoratorName(decorator);
        if (!decoratorName || !utils_1.isNgDecorator(decoratorName))
            return;
        var allowedDecorators = utils_1.METADATA_TYPE_DECORATOR_MAPPER[metadataType];
        if (!allowedDecorators || allowedDecorators.has(decoratorName))
            return;
        var className = klass.name.getText();
        var failure = exports.getFailureMessage({ className: className, decoratorName: decoratorName, metadataType: metadataType });
        this.addFailureAtNode(decorator, failure);
    };
    return Walker;
}(ngWalker_1.NgWalker));
